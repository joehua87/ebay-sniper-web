schema {
  query: RootQueryType
  mutation: RootMutationType
}

# The `Date` scalar type represents a date. The Date appears in a JSON
# response as an ISO8601 formatted string, without a time component.
scalar Date

input DateFilterInput {
  eq: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  neq: Date
}

# The `DateTime` scalar type represents a date and time in the UTC
# timezone. The DateTime appears in a JSON response as an ISO8601 formatted
# string, including UTC timezone ("Z"). The parsed date and time string will
# be converted to UTC if there is an offset.
scalar DateTime

input IdFilterInput {
  eq: ID
  in: [ID!]
  neq: ID
  nin: [ID!]
}

type Image {
  caption: String
  id: String!
}

input ImageInput {
  caption: String
  id: String!
}

input IntegerFilterInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  neq: Int
}

type Inventory {
  id: ID!
  provider: String!
}

# The `Json` scalar type represents arbitrary json string data, represented as UTF-8
# character sequences. The Json type is most often used to represent a free-form
# human-readable json string.
scalar Json

type Listing {
  attributes: Json
  auctionPrice: Int
  bidsCount: Int
  buyItNowPrice: Int
  condition: String
  currency: String
  description: String
  id: ID!
  image: String
  images: [String!]!
  listingAt: DateTime
  listingEndAt: DateTime
  location: String
  price: Int!
  purchaseOptions: [String!]!
  returns: String
  seller: User
  sellerId: ID
  shippingPrice: Int!
  stock: Int
  title: String!
}

type ListingCategory {
  id: ID!
  name: String
  path: [String!]!
}

input ListingCategoryFilterInput {
  name: StringFilterInput
}

type ListingCategoryListResult {
  entities: [ListingCategory!]!
  paging: Paging!
}

input ListingFilterInput {
  name: StringFilterInput
}

type ListingListResult {
  entities: [Listing!]!
  paging: Paging!
}

type ListingQuery {
  accountId: ID
  config: Json!
  id: ID!
  searchParams: Json!
  url: String!
}

input ListingQueryFilterInput {
  name: StringFilterInput
}

type ListingQueryListResult {
  entities: [ListingQuery!]!
  paging: Paging!
}

# The `Naive DateTime` scalar type represents a naive date and time without
# timezone. The DateTime appears in a JSON response as an ISO8601 formatted
# string.
scalar NaiveDateTime

type Order {
  accountId: ID!
  date: Date!
  id: ID!
  internalState: String!
  inventory: Inventory!
  inventoryId: ID!
  items: [OrderItem!]!
  itemsTotal: Int!
  seller: User!
  sellerId: ID!
  shipments: [Shipment!]!
  shippingCost: Int!
  state: String!
  total: Int!
  website: String
}

input OrderByInput {
  direction: OrderDirection!
  field: String!

  # Use for order field in entry_integer_value, entry_decimal_value & friends
  fieldType: OrderFieldType
}

enum OrderDirection {
  ASC
  ASC_NULLS_FIRST
  ASC_NULLS_LAST
  DESC
  DESC_NULLS_FIRST
  DESC_NULLS_LAST
}

enum OrderFieldType {
  BOOLEAN
  DATE
  DATETIME
  DECIMAL
  INTEGER
  TIME
}

input OrderFilterInput {
  id: IdFilterInput
  internalState: StringFilterInput
  inventoryId: IdFilterInput
  name: StringFilterInput
  sellerId: IdFilterInput
  state: StringFilterInput
}

type OrderItem {
  itemId: String!
  itemsTotal: Int!
  orderId: ID!
  price: Int!
  quantity: Int!
  shippingCost: Int!
  title: String!
  total: Int!
}

type OrderListResult {
  entities: [Order!]!
  paging: Paging!
}

type Paging {
  page: Int!
  pageSize: Int!
  totalEntities: Int!
  totalPages: Int!
}

input PagingInput {
  page: Int
  pageSize: Int
}

type RootMutationType {
  createWarehouseReceive(data: WarehouseReceiveInput!): WarehouseReceive!
  scrapeListing(listingQueryId: ID!): [Listing!]!
  updateListing(id: ID!): Listing!
}

type RootQueryType {
  listingCategories(filter: ListingCategoryFilterInput, orderBy: [OrderByInput!], paging: PagingInput): ListingCategoryListResult!
  listingQueries(filter: ListingQueryFilterInput, orderBy: [OrderByInput!], paging: PagingInput): ListingQueryListResult!
  listings(filter: ListingFilterInput, orderBy: [OrderByInput!], paging: PagingInput): ListingListResult!
  orders(filter: OrderFilterInput, orderBy: [OrderByInput!], paging: PagingInput): OrderListResult!
  shipmentAggregate: [ShipmentAggregateItem!]!
  shipments(filter: ShipmentFilterInput, orderBy: [OrderByInput!], paging: PagingInput): ShipmentListResult!
  warehouseReceives(filter: WarehouseReceiveFilterInput, orderBy: [OrderByInput!], paging: PagingInput): WarehouseReceiveListResult!
}

type Shipment {
  currentStep: Int
  deliveredAt: Date
  id: ID!
  order: Order!
  orderId: ID!
  paidAt: Date
  placedAt: NaiveDateTime
  receivedAt: Date
  shippedAt: Date
  state: String
  trackingNumber: String
  updatedAt: NaiveDateTime
  value: Int!
}

type ShipmentAggregateItem {
  count: Int!
  state: String!
  total: Int!
}

input ShipmentFilterInput {
  currentStep: IntegerFilterInput
  deliveredAt: DateFilterInput
  id: IdFilterInput
  paidAt: DateFilterInput
  receivedAt: DateFilterInput
  shippedAt: DateFilterInput
  shippingService: StringFilterInput
  state: StringFilterInput
  trackingNumber: StringFilterInput
  value: IntegerFilterInput
}

type ShipmentListResult {
  entities: [Shipment!]!
  paging: Paging!
}

input StringFilterInput {
  eq: String
  ilike: String
  in: [String!]
  like: String
  neq: String
}

type User {
  feedbackText: String
  id: ID!
  negativeFeedback: Int
  neutralFeedback: Int
  positiveFeedback: Int
  receivedAsSellerFeedback: Int
  registeredAt: NaiveDateTime
  totalFeedback: Int
  username: String!
}

type WarehouseReceive {
  id: ID!
  shipments: [WarehouseReceiveShipment!]!
  shippingTotal: Int!
  total: Int!
  valueTotal: Int!
}

input WarehouseReceiveFilterInput {
  name: StringFilterInput
}

input WarehouseReceiveInput {
  items: [WarehouseReceiveShipmentInput!]!
}

type WarehouseReceiveListResult {
  entities: [WarehouseReceive!]!
  paging: Paging!
}

type WarehouseReceiveShipment {
  id: ID!
  images: [Image!]!
  order: Order!
  orderId: ID!
  shipment: Shipment!
  shipmentId: ID!
  shippingCost: Int!
  warehouseReceiveId: ID!
}

input WarehouseReceiveShipmentInput {
  images: [ImageInput!]!
  shipmentId: ID!
  shippingCost: Int!
}
